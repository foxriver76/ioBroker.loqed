{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import * as utils from '@iobroker/adapter-core';\nimport { LOQED } from 'loqed-api';\n\n/**\n * Config passed from website to adapter\n */\ninterface LOQEDConfig {\n    lock_id: string;\n    lock_key_local_id: number;\n    lock_key_key: string;\n    backend_key: string;\n    bridge_key: string;\n    bridge_ip: string;\n    bridge_mdns_hostname: string;\n}\n\nclass Loqed extends utils.Adapter {\n    private loqedClient: LOQED | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'loqed'\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        let loqedConfig: LOQEDConfig;\n        try {\n            loqedConfig = JSON.parse(this.config.loqedConfig);\n        } catch {\n            this.log.error(`Could not parse LOQED config (${this.config.loqedConfig}), please ensure it is valid`);\n            return;\n        }\n\n        this.subscribeStates('lockMotor.goToPosition');\n        this.subscribeStates('lockMotor.homekitLockTargetState');\n        this.subscribeStates('lockMotor.simpleLockUnlock');\n\n        this.config.port = await this.getPortAsync(this.config.port);\n\n        this.loqedClient = new LOQED({\n            bridgeKey: loqedConfig.bridge_key,\n            apiKey: loqedConfig.lock_key_key,\n            ip: loqedConfig.bridge_ip,\n            lockId: loqedConfig.lock_key_local_id,\n            port: this.config.port\n        });\n\n        this.config.callbackUrl = `${this.config.callbackUrl}:${this.config.port}/`;\n\n        await this.ensureWebhookRegistered();\n        await this.syncStatus();\n\n        this.loqedClient.on('STATE_CHANGED', async event => {\n            this.log.info(`State changed to ${event.val}`);\n            await this.setStateChangedAsync('info.connection', true, true);\n            await this.setStateAsync('lockMotor.currentPosition', event.val, true);\n\n            switch (event.val) {\n                case 'OPEN':\n                    await this.setStateAsync('lockMotor.homekitLockCurrentState', 0, true);\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 0, true);\n                    await this.setStateAsync('lockMotor.simpleLockUnlock', true, true);\n                    break;\n                case 'DAY_LOCK':\n                    await this.setStateAsync('lockMotor.homekitLockCurrentState', 0, true);\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 0, true);\n                    await this.setStateAsync('lockMotor.simpleLockUnlock', true, true);\n                    break;\n                case 'NIGHT_LOCK':\n                    await this.setStateAsync('lockMotor.homekitLockCurrentState', 1, true);\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 1, true);\n                    await this.setStateAsync('lockMotor.simpleLockUnlock', false, true);\n                    break;\n            }\n        });\n\n        this.loqedClient.on('GO_TO_STATE', async event => {\n            this.log.info(`Lock tries to go to ${event.val} by key ${event.localKeyId}`);\n            await this.setStateChangedAsync('info.connection', true, true);\n            await this.setStateAsync('lockMotor.localKeyId', event.localKeyId, true);\n            await this.setStateAsync('lockMotor.goToPosition', event.val, true);\n            switch (event.val) {\n                case 'OPEN':\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 0, true);\n                    //await this.setStateAsync('lockMotor.simpleLockUnlock', true, true); //if state is changed at this point we don't get the real lock/unlock state\n                    break;\n                case 'DAY_LOCK':\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 0, true);\n                    //await this.setStateAsync('lockMotor.simpleLockUnlock', true, true); //if state is changed at this point we don't get the real lock/unlock state\n                    break;\n                case 'NIGHT_LOCK':\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 1, true);\n                    //await this.setStateAsync('lockMotor.simpleLockUnlock', false, true);\n                    break;\n            }\n        });\n\n        this.loqedClient.on('BATTERY_LEVEL', async levelEvent => {\n            this.log.info(`Battery level received: ${levelEvent.val}`);\n            await this.setStateChangedAsync('info.connection', true, true);\n            await this.setStateAsync('lockStatus.batteryPercentage', levelEvent.val, true);\n        });\n\n        this.loqedClient.on('BLE_STRENGTH', async bleEvent => {\n            this.log.info(`BLE strength received: ${bleEvent.val}`);\n            await this.setStateAsync('info.connection', bleEvent.val !== -1, true);\n        });\n\n        this.loqedClient.on('UNKNOWN_EVENT', data => {\n            this.log.warn(`Unknown event: ${JSON.stringify(data)}`);\n        });\n    }\n\n    /**\n     * Get states from lock and sync them to states\n     */\n    private async syncStatus(): Promise<void> {\n        try {\n            const status = await this.loqedClient!.getStatus();\n\n            await this.extendForeignObjectAsync(this.namespace, {\n                // @ts-expect-error issue already exists\n                type: 'device',\n                common: {\n                    name: 'LOQED lock'\n                },\n                native: status\n            });\n\n            await this.setStateAsync('info.connection', !!status.lock_online, true);\n            await this.setStateAsync('lockStatus.batteryPercentage', status.battery_percentage, true);\n            await this.setStateAsync('lockMotor.currentPosition', status.bolt_state.toUpperCase(), true);\n\n            switch (status.bolt_state.toUpperCase()) {\n                case 'OPEN':\n                    await this.setStateAsync('lockMotor.homekitLockCurrentState', 0, true);\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 0, true);\n                    await this.setStateAsync('lockMotor.simpleLockUnlock', true, true);\n                    break;\n                case 'DAY_LOCK':\n                    await this.setStateAsync('lockMotor.homekitLockCurrentState', 0, true);\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 0, true);\n                    await this.setStateAsync('lockMotor.simpleLockUnlock', true, true);\n                    break;\n                case 'NIGHT_LOCK':\n                    await this.setStateAsync('lockMotor.homekitLockCurrentState', 1, true);\n                    await this.setStateAsync('lockMotor.homekitLockTargetState', 1, true);\n                    await this.setStateAsync('lockMotor.simpleLockUnlock', false, true);\n                    break;\n            }\n        } catch (e: any) {\n            this.log.error(`Could not sync status: ${e.message}`);\n        }\n    }\n\n    /**\n     * Ensure that we have a callback registered\n     */\n    private async ensureWebhookRegistered(): Promise<void> {\n        try {\n            const webhooks = await this.loqedClient!.listWebhooks();\n\n            this.log.debug(`Checking if webhook for \"${this.config.callbackUrl}\" is registered`);\n\n            const webhookRegistered = webhooks.find(entry => entry.url === this.config.callbackUrl);\n\n            if (webhookRegistered) {\n                this.log.info(`Webhook for our application already registered with id ${webhookRegistered.id}`);\n            } else {\n                this.log.info('No matching webhook found, registering one now');\n                await this.loqedClient!.registerWebhook(this.config.callbackUrl);\n                this.log.info('Webhook sucessfully registered');\n            }\n        } catch (e: any) {\n            this.log.error(`Could not ensure, that webhook is registered: ${e.message}`);\n        }\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            await this.setStateAsync('info.connection', false, true);\n\n            if (this.loqedClient) {\n                await this.loqedClient.stopServer();\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    /**\n     * Is called if a subscribed state changes\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (!state || state.ack || !this.loqedClient) {\n            // state deleted or already acked or no active loqedClient\n            return;\n        }\n\n        this.log.debug('changed state: ' + id);\n\n        //calc changed state name\n        const dp = id.split('.').slice(2).join('.');\n\n        switch (dp) {\n            case 'lockMotor.goToPosition':\n                switch (state.val) {\n                    case 'DAY_LOCK':\n                        this.log.debug('Latch lock');\n                        try {\n                            await this.loqedClient.latchLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not latch lock: ${e.message}`);\n                        }\n                        break;\n                    case 'NIGHT_LOCK':\n                        this.log.debug('Lock lock');\n\n                        try {\n                            await this.loqedClient.lockLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not lock lock: ${e.message}`);\n                        }\n                        break;\n                    case 'OPEN':\n                        this.log.debug('Open lock');\n\n                        try {\n                            await this.loqedClient.openLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not open lock: ${e.message}`);\n                        }\n                        break;\n                    default:\n                        this.log.warn(`Unknown state change: \"${id}\": ${state.val}`);\n                }\n                break;\n            case 'lockMotor.homekitLockTargetState':\n                switch (state.val) {\n                    case 0:\n                        //DAY_LOCK\n                        this.log.debug('Latch lock');\n                        try {\n                            await this.loqedClient.latchLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not latch lock: ${e.message}`);\n                        }\n                        break;\n                    case 1:\n                        //NIGHT_LOCK\n                        this.log.debug('Lock lock');\n                        try {\n                            await this.loqedClient.lockLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not lock lock: ${e.message}`);\n                        }\n                        break;\n                    default:\n                        this.log.warn(`Unknown state change: \"${id}\": ${state.val}`);\n                }\n                break;\n            case 'lockMotor.simpleLockUnlock':\n                switch (state.val) {\n                    case true:\n                        //DAY_LOCK\n                        this.log.debug('Latch lock');\n                        try {\n                            await this.loqedClient.latchLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not latch lock: ${e.message}`);\n                        }\n                        break;\n                    case false:\n                        //NIGHT_LOCK\n                        this.log.debug('Lock lock');\n                        try {\n                            await this.loqedClient.lockLock();\n                        } catch (e: any) {\n                            this.log.error(`Could not lock lock: ${e.message}`);\n                        }\n                        break;\n                    default:\n                        this.log.warn(`Unknown state change: \"${id}\": ${state.val}`);\n                }\n                break;\n            default:\n                this.log.warn(`State has not to be changed: \"${id}\": ${state.val}`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Loqed(options);\n} else {\n    (() => new Loqed())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA,YAAuB;AACvB,uBAAsB;AAetB,MAAM,cAAc,MAAM,QAAQ;AAAA,EAGvB,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AACnC,QAAI;AACJ,QAAI;AACA,oBAAc,KAAK,MAAM,KAAK,OAAO,WAAW;AAAA,IACpD,QAAE;AACE,WAAK,IAAI,MAAM,iCAAiC,KAAK,OAAO,yCAAyC;AACrG;AAAA,IACJ;AAEA,SAAK,gBAAgB,wBAAwB;AAC7C,SAAK,gBAAgB,kCAAkC;AACvD,SAAK,gBAAgB,4BAA4B;AAEjD,SAAK,OAAO,OAAO,MAAM,KAAK,aAAa,KAAK,OAAO,IAAI;AAE3D,SAAK,cAAc,IAAI,uBAAM;AAAA,MACzB,WAAW,YAAY;AAAA,MACvB,QAAQ,YAAY;AAAA,MACpB,IAAI,YAAY;AAAA,MAChB,QAAQ,YAAY;AAAA,MACpB,MAAM,KAAK,OAAO;AAAA,IACtB,CAAC;AAED,SAAK,OAAO,cAAc,GAAG,KAAK,OAAO,eAAe,KAAK,OAAO;AAEpE,UAAM,KAAK,wBAAwB;AACnC,UAAM,KAAK,WAAW;AAEtB,SAAK,YAAY,GAAG,iBAAiB,OAAM,UAAS;AAChD,WAAK,IAAI,KAAK,oBAAoB,MAAM,KAAK;AAC7C,YAAM,KAAK,qBAAqB,mBAAmB,MAAM,IAAI;AAC7D,YAAM,KAAK,cAAc,6BAA6B,MAAM,KAAK,IAAI;AAErE,cAAQ,MAAM;AAAA,aACL;AACD,gBAAM,KAAK,cAAc,qCAAqC,GAAG,IAAI;AACrE,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AACpE,gBAAM,KAAK,cAAc,8BAA8B,MAAM,IAAI;AACjE;AAAA,aACC;AACD,gBAAM,KAAK,cAAc,qCAAqC,GAAG,IAAI;AACrE,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AACpE,gBAAM,KAAK,cAAc,8BAA8B,MAAM,IAAI;AACjE;AAAA,aACC;AACD,gBAAM,KAAK,cAAc,qCAAqC,GAAG,IAAI;AACrE,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AACpE,gBAAM,KAAK,cAAc,8BAA8B,OAAO,IAAI;AAClE;AAAA;AAAA,IAEZ,CAAC;AAED,SAAK,YAAY,GAAG,eAAe,OAAM,UAAS;AAC9C,WAAK,IAAI,KAAK,uBAAuB,MAAM,cAAc,MAAM,YAAY;AAC3E,YAAM,KAAK,qBAAqB,mBAAmB,MAAM,IAAI;AAC7D,YAAM,KAAK,cAAc,wBAAwB,MAAM,YAAY,IAAI;AACvE,YAAM,KAAK,cAAc,0BAA0B,MAAM,KAAK,IAAI;AAClE,cAAQ,MAAM;AAAA,aACL;AACD,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AAEpE;AAAA,aACC;AACD,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AAEpE;AAAA,aACC;AACD,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AAEpE;AAAA;AAAA,IAEZ,CAAC;AAED,SAAK,YAAY,GAAG,iBAAiB,OAAM,eAAc;AACrD,WAAK,IAAI,KAAK,2BAA2B,WAAW,KAAK;AACzD,YAAM,KAAK,qBAAqB,mBAAmB,MAAM,IAAI;AAC7D,YAAM,KAAK,cAAc,gCAAgC,WAAW,KAAK,IAAI;AAAA,IACjF,CAAC;AAED,SAAK,YAAY,GAAG,gBAAgB,OAAM,aAAY;AAClD,WAAK,IAAI,KAAK,0BAA0B,SAAS,KAAK;AACtD,YAAM,KAAK,cAAc,mBAAmB,SAAS,QAAQ,IAAI,IAAI;AAAA,IACzE,CAAC;AAED,SAAK,YAAY,GAAG,iBAAiB,UAAQ;AACzC,WAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,GAAG;AAAA,IAC1D,CAAC;AAAA,EACL;AAAA,EAKA,MAAc,aAA4B;AACtC,QAAI;AACA,YAAM,SAAS,MAAM,KAAK,YAAa,UAAU;AAEjD,YAAM,KAAK,yBAAyB,KAAK,WAAW;AAAA,QAEhD,MAAM;AAAA,QACN,QAAQ;AAAA,UACJ,MAAM;AAAA,QACV;AAAA,QACA,QAAQ;AAAA,MACZ,CAAC;AAED,YAAM,KAAK,cAAc,mBAAmB,CAAC,CAAC,OAAO,aAAa,IAAI;AACtE,YAAM,KAAK,cAAc,gCAAgC,OAAO,oBAAoB,IAAI;AACxF,YAAM,KAAK,cAAc,6BAA6B,OAAO,WAAW,YAAY,GAAG,IAAI;AAE3F,cAAQ,OAAO,WAAW,YAAY;AAAA,aAC7B;AACD,gBAAM,KAAK,cAAc,qCAAqC,GAAG,IAAI;AACrE,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AACpE,gBAAM,KAAK,cAAc,8BAA8B,MAAM,IAAI;AACjE;AAAA,aACC;AACD,gBAAM,KAAK,cAAc,qCAAqC,GAAG,IAAI;AACrE,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AACpE,gBAAM,KAAK,cAAc,8BAA8B,MAAM,IAAI;AACjE;AAAA,aACC;AACD,gBAAM,KAAK,cAAc,qCAAqC,GAAG,IAAI;AACrE,gBAAM,KAAK,cAAc,oCAAoC,GAAG,IAAI;AACpE,gBAAM,KAAK,cAAc,8BAA8B,OAAO,IAAI;AAClE;AAAA;AAAA,IAEZ,SAAS,GAAP;AACE,WAAK,IAAI,MAAM,0BAA0B,EAAE,SAAS;AAAA,IACxD;AAAA,EACJ;AAAA,EAKA,MAAc,0BAAyC;AACnD,QAAI;AACA,YAAM,WAAW,MAAM,KAAK,YAAa,aAAa;AAEtD,WAAK,IAAI,MAAM,4BAA4B,KAAK,OAAO,4BAA4B;AAEnF,YAAM,oBAAoB,SAAS,KAAK,WAAS,MAAM,QAAQ,KAAK,OAAO,WAAW;AAEtF,UAAI,mBAAmB;AACnB,aAAK,IAAI,KAAK,0DAA0D,kBAAkB,IAAI;AAAA,MAClG,OAAO;AACH,aAAK,IAAI,KAAK,gDAAgD;AAC9D,cAAM,KAAK,YAAa,gBAAgB,KAAK,OAAO,WAAW;AAC/D,aAAK,IAAI,KAAK,gCAAgC;AAAA,MAClD;AAAA,IACJ,SAAS,GAAP;AACE,WAAK,IAAI,MAAM,iDAAiD,EAAE,SAAS;AAAA,IAC/E;AAAA,EACJ;AAAA,EAKA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,YAAM,KAAK,cAAc,mBAAmB,OAAO,IAAI;AAEvD,UAAI,KAAK,aAAa;AAClB,cAAM,KAAK,YAAY,WAAW;AAAA,MACtC;AAEA,eAAS;AAAA,IACb,QAAE;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAIA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,CAAC,SAAS,MAAM,OAAO,CAAC,KAAK,aAAa;AAE1C;AAAA,IACJ;AAEA,SAAK,IAAI,MAAM,oBAAoB,EAAE;AAGrC,UAAM,KAAK,GAAG,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAE1C,YAAQ;AAAA,WACC;AACD,gBAAQ,MAAM;AAAA,eACL;AACD,iBAAK,IAAI,MAAM,YAAY;AAC3B,gBAAI;AACA,oBAAM,KAAK,YAAY,UAAU;AAAA,YACrC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,yBAAyB,EAAE,SAAS;AAAA,YACvD;AACA;AAAA,eACC;AACD,iBAAK,IAAI,MAAM,WAAW;AAE1B,gBAAI;AACA,oBAAM,KAAK,YAAY,SAAS;AAAA,YACpC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,wBAAwB,EAAE,SAAS;AAAA,YACtD;AACA;AAAA,eACC;AACD,iBAAK,IAAI,MAAM,WAAW;AAE1B,gBAAI;AACA,oBAAM,KAAK,YAAY,SAAS;AAAA,YACpC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,wBAAwB,EAAE,SAAS;AAAA,YACtD;AACA;AAAA;AAEA,iBAAK,IAAI,KAAK,0BAA0B,QAAQ,MAAM,KAAK;AAAA;AAEnE;AAAA,WACC;AACD,gBAAQ,MAAM;AAAA,eACL;AAED,iBAAK,IAAI,MAAM,YAAY;AAC3B,gBAAI;AACA,oBAAM,KAAK,YAAY,UAAU;AAAA,YACrC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,yBAAyB,EAAE,SAAS;AAAA,YACvD;AACA;AAAA,eACC;AAED,iBAAK,IAAI,MAAM,WAAW;AAC1B,gBAAI;AACA,oBAAM,KAAK,YAAY,SAAS;AAAA,YACpC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,wBAAwB,EAAE,SAAS;AAAA,YACtD;AACA;AAAA;AAEA,iBAAK,IAAI,KAAK,0BAA0B,QAAQ,MAAM,KAAK;AAAA;AAEnE;AAAA,WACC;AACD,gBAAQ,MAAM;AAAA,eACL;AAED,iBAAK,IAAI,MAAM,YAAY;AAC3B,gBAAI;AACA,oBAAM,KAAK,YAAY,UAAU;AAAA,YACrC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,yBAAyB,EAAE,SAAS;AAAA,YACvD;AACA;AAAA,eACC;AAED,iBAAK,IAAI,MAAM,WAAW;AAC1B,gBAAI;AACA,oBAAM,KAAK,YAAY,SAAS;AAAA,YACpC,SAAS,GAAP;AACE,mBAAK,IAAI,MAAM,wBAAwB,EAAE,SAAS;AAAA,YACtD;AACA;AAAA;AAEA,iBAAK,IAAI,KAAK,0BAA0B,QAAQ,MAAM,KAAK;AAAA;AAEnE;AAAA;AAEA,aAAK,IAAI,KAAK,iCAAiC,QAAQ,MAAM,KAAK;AAAA;AAAA,EAE9E;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AACzB,SAAO,UAAU,CAAC,YAAuD,IAAI,MAAM,OAAO;AAC9F,OAAO;AACH,GAAC,MAAM,IAAI,MAAM,GAAG;AACxB;",
  "names": []
}
